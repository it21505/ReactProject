[{"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\index.js":"1","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\reportWebVitals.js":"2","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\App.js":"3","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\MenuComponent.js":"4","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\dishes.js":"5","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\MainComponent.js":"7","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\FooterComponent.js":"9","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\HomeComponent.js":"10","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\ContactComponent.js":"11","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\promotions.js":"12","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\comments.js":"13","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\leaders.js":"14","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\AboutComponent.js":"15","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\configureStore.js":"16","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\dishes.js":"17","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\promotions.js":"18","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\leaders.js":"19","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\comments.js":"20","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\ActionCreators.js":"21","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\ActionTypes.js":"22","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\LoadingComponent.js":"23","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\forms.js":"24","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\baseUrl.js":"25"},{"size":643,"mtime":1608039209392,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":535,"mtime":1609680344302,"results":"29","hashOfConfig":"27"},{"size":2035,"mtime":1610915216064,"results":"30","hashOfConfig":"27"},{"size":1490,"mtime":1608157846249,"results":"31","hashOfConfig":"27"},{"size":7500,"mtime":1610790229332,"results":"32","hashOfConfig":"27"},{"size":3975,"mtime":1610889065458,"results":"33","hashOfConfig":"27"},{"size":5368,"mtime":1609093601178,"results":"34","hashOfConfig":"27"},{"size":2649,"mtime":1608141328398,"results":"35","hashOfConfig":"27"},{"size":2128,"mtime":1610792134221,"results":"36","hashOfConfig":"27"},{"size":9754,"mtime":1610892271285,"results":"37","hashOfConfig":"27"},{"size":445,"mtime":1608157876562,"results":"38","hashOfConfig":"27"},{"size":4280,"mtime":1608157860935,"results":"39","hashOfConfig":"27"},{"size":2382,"mtime":1608159417499,"results":"40","hashOfConfig":"27"},{"size":5098,"mtime":1610915404233,"results":"41","hashOfConfig":"27"},{"size":819,"mtime":1610379592933,"results":"42","hashOfConfig":"27"},{"size":619,"mtime":1610370878564,"results":"43","hashOfConfig":"27"},{"size":656,"mtime":1610491980737,"results":"44","hashOfConfig":"27"},{"size":644,"mtime":1610791749804,"results":"45","hashOfConfig":"27"},{"size":650,"mtime":1610744328263,"results":"46","hashOfConfig":"27"},{"size":6805,"mtime":1610893420125,"results":"47","hashOfConfig":"27"},{"size":601,"mtime":1610887250632,"results":"48","hashOfConfig":"27"},{"size":256,"mtime":1610370775777,"results":"49","hashOfConfig":"27"},{"size":169,"mtime":1610379588550,"results":"50","hashOfConfig":"27"},{"size":48,"mtime":1610489039279,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1egubp3",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\index.js",[],["112","113"],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\reportWebVitals.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\App.js",["114","115"],"\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Main from './components/MainComponent';\nimport './App.css';\nimport { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nclass App extends Component{ \nrender(){\n  return(\n    <Provider store={store}>\n    <BrowserRouter>\n    <div>\n      <Main/>\n    </div>\n    </BrowserRouter>\n    </Provider>\n  )};\n\n}\n\nexport default App;\n","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\MenuComponent.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\dishes.js",[],["116","117"],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\DishdetailComponent.js",["118","119","120","121","122","123","124","125"],"import React, { Component } from 'react';\r\nimport {\r\n    Button, Card, CardImg, CardBody, CardText, CardTitle, Breadcrumb, BreadcrumbItem,\r\n    Modal, ModalHeader, ModalBody, FormGroup, Label, Form, Input, Row, Col\r\n} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent'\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\n\r\n\r\n\r\nclass CommentForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        }\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleForm = this.handleForm.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        })\r\n    }\r\n\r\n    handleForm(values) {\r\n        this.toggleModal();\r\n        alert(JSON.stringify(values));\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}><span className=\"fa fa-pencil fa-lg\"></span> Submit Comment</Button>\r\n\r\n                <Modal isOpen={this.state.isModalOpen} >\r\n                    <ModalHeader toggle={this.toggleModal}><b>Submit Comment</b></ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={12}>\r\n                                    <Label forHtml=\"rating\">Rating</Label>\r\n                                    <Control.text model=\".rating\" id=\"rating\" name=\"rating\"\r\n                                        className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={12}>\r\n                                    <Label forHtml=\"author\">Name</Label>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors className=\"text-danger\" model=\".name\" show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={12}>\r\n                                    <Label forHtml=\"comment\">Comment</Label>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" rows=\"12\"\r\n                                        className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"submit\" color=\"primary\">Submit</Button>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction RenderDish({ dish }) {\r\n    if (dish != null) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <FadeTransform in transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }}>\r\n                    <Card>\r\n                        <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                        <CardBody>\r\n                            <CardTitle>{dish.name}</CardTitle>\r\n                            <CardText>{dish.description}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </FadeTransform>\r\n            </div>\r\n        );\r\n    } else {\r\n        <div></div>\r\n    }\r\n}\r\n\r\nfunction RenderComments({ comments, postComment, dishId }) {\r\n    if (comments != null) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    <Stagger in>\r\n                    {comments.map((comment) => {\r\n                        return (\r\n                            <Fade in>\r\n                            <li key={comment.id}>\r\n                                <p>{comment.comment}</p>\r\n                                <p>-- {comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}</p>\r\n\r\n                            </li>\r\n                            </Fade>\r\n                        );\r\n                    })}\r\n                    <CommentForm dishId={dishId} postComment={postComment} />\r\n                    </Stagger>\r\n                </ul>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div>why?</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    if (props.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    } else if (props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    if (props.dish != null) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments}\r\n                        postComment={props.postComment}\r\n                        dishId={props.dish.id}\r\n                    />\r\n                </div>\r\n            </div >\r\n\r\n        );\r\n\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DishDetail;\r\n","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\MainComponent.js",["126"],"\r\nimport Menu from './MenuComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Home from './HomeComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\n\r\n\r\nimport { Component } from 'react';\r\nimport DishDetail  from './DishdetailComponent';\r\n\r\nimport { Switch , Redirect , Route , withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postComment , fetchDishes , fetchComments , fetchPromos , fetchLeaders, postFeedback } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\nimport { TransitionGroup , CSSTransition } from 'react-transition-group';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes : state.dishes,\r\n    comments : state.comments,\r\n    promotions : state.promotions,\r\n    leaders : state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  postComment: ( dishId , rating , author , comment ) => dispatch(postComment(dishId , rating , author , comment)),\r\n  postFeedback: (firstname , lastname , telnum , email , agree , contactType , message ) => dispatch(postFeedback(firstname , lastname , telnum , email , agree , contactType , message)),\r\n  fetchDishes: () => {dispatch(fetchDishes())},\r\n  fetchComments: () => {dispatch(fetchComments())},\r\n  fetchPromos: () => {dispatch(fetchPromos())},\r\n  fetchLeaders: () => {dispatch(fetchLeaders())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback')) }\r\n})\r\n\r\nclass Main extends Component{ \r\n \r\n  constructor(props) {\r\n    super(props);\r\n/*\r\n    this.state = {\r\n      dishes : DISHES,\r\n      comments : COMMENTS,\r\n      promotions : PROMOTIONS,\r\n      leaders : LEADERS,\r\n      selectedDish : null\r\n    };\r\n*/\r\n}\r\n\r\ncomponentDidMount(){\r\n  this.props.fetchDishes();\r\n  this.props.fetchComments();\r\n  this.props.fetchPromos();\r\n  this.props.fetchLeaders();\r\n}\r\n\r\nrender(){\r\n  const HomePage = () => {\r\n    return(\r\n      <Home dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n      dishesLoading={this.props.dishes.isLoading}\r\n      dishesErrMess={this.props.dishes.error}\r\n      promotion={this.props.promotions.promotions.filter((prom) => prom.featured)[0]}\r\n      promosLoading={this.props.promotions.isLoading}\r\n      promosErrMess={this.props.promotions.error}\r\n      leader={this.props.leaders.leaders.filter((leader) => leader.featured)[0]}\r\n      leadersLoading={this.props.leaders.isLoading}\r\n      leadersErrMess={this.props.leaders.error}\r\n      />\r\n    );\r\n  }\r\n\r\n  \r\nconst DishWithId = ({match}) => {\r\n    return(\r\n      <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n      comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n      isLoading={this.props.dishes.isLoading}\r\n      errMess={this.props.dishes.error}\r\n      postComment={this.props.postComment}\r\n      commentsErrMess={this.props.comments.error}\r\n      />\r\n    );\r\n}\r\n\r\n  return(\r\n    <div>\r\n      <Header/>\r\n      <TransitionGroup>\r\n        <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\r\n      <Switch>\r\n       <Route path=\"/home\" component={HomePage} />\r\n       <Route path=\"/aboutus\" component={() => <About leaders={this.props.leaders} leadersLoading={this.props.leaders.isLoading} leadersErrMess={this.props.leaders.error}/> } />\r\n       <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes.dishes} /> } />\r\n       <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n       <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} postFeedback={this.props.postFeedback}/>}/>\r\n       <Redirect to=\"/home\" />\r\n      </Switch>\r\n      </CSSTransition>\r\n      </TransitionGroup>\r\n      <Footer/>\r\n    </div>\r\n  )};\r\n\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));\r\n","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\HeaderComponent.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\FooterComponent.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\HomeComponent.js",["127"],"import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, Fade } from 'reactstrap';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform } from 'react-animation-components'; \r\nfunction Home(props) {\r\n\r\n    function RenderCard({ item, isLoading, errMess }) {\r\n        if (isLoading) {\r\n            return(\r\n                    <Loading />\r\n            );\r\n        }\r\n        else if (errMess) {\r\n            return(\r\n                    <h4>{errMess}</h4>\r\n            );\r\n        }\r\n        else \r\n            return (\r\n                <FadeTransform in transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }}>\r\n                <Card>\r\n                    <CardImg src={baseUrl + item.image} alt={item.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{item.name}</CardTitle>\r\n                        {item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : null}\r\n                        <CardText>{item.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n                </FadeTransform>\r\n            );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row align-items-start\">\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.dish} \r\n                    isLoading={props.dishesLoading} \r\n                    errMess={props.dishesErrMess} />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.promotion}\r\n                    isLoading={props.promosLoading} \r\n                    errMess={props.promosErrMess} />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.leader} \r\n                    isLoading={props.leadersLoading}\r\n                    errMess={props.leadersErrMess}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\ContactComponent.js",["128","129","130","131","132","133","134","135","136","137","138","139"],"import React , { Component } from 'react';\r\nimport { Breadcrumb , BreadcrumbItem , Button , FormGroup , Label , Input ,Row, Col , FormFeedback} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control , Form , Errors , actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst isEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values){\r\n        this.props.postFeedback(values.firstname , values.lastname , values.telnum , values.email , values.agree , values.contactType , values.message );\r\n        //this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n    render(){\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Contact Us</h3>\r\n                    <hr/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                <h3>Location Information</h3>\r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                    <h5>Map of our Location</h5>\r\n                </div>\r\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                    <div className=\"btn-group\" role=\"group\">\r\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h3>Send Us Your Feedback</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-9\">\r\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"firstname\" md={2}>\r\n                                First Name\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" \r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required , minLength: minLength(3) , maxLength : maxLength(15)\r\n                                }}\r\n                                />     \r\n                                <Errors className=\"text-danger\" model=\".firstname\" show=\"touched\"\r\n                                messages={{\r\n                                    required : 'Required* ',\r\n                                    minLength : 'Must be greater than 2 charachters.',\r\n                                    maxLength : 'Must be 15 characters or less.'\r\n                                }}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"lastname\" md={2}>\r\n                                Last Name\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" \r\n                                className=\"form-control\" validators={{\r\n                                    required , minLength: minLength(3) , maxLength : maxLength(15)\r\n                                }}\r\n                                />     \r\n                                <Errors className=\"text-danger\" model=\".lastname\" show=\"touched\"\r\n                                messages={{\r\n                                    required : 'Required* ',\r\n                                    minLength : 'Must be greater than 2 charachters.',\r\n                                    maxLength : 'Must be 15 characters or less.'\r\n                                }}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"telnum\" md={2}>\r\n                                Contact Tel.\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. Number\" \r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required , minLength: minLength(3) , maxLength : maxLength(15) , isNumber \r\n                                }}/>  \r\n                                <Errors className=\"text-danger\" model=\".telnum\" show=\"touched\"\r\n                                messages={{\r\n                                    required : 'Required* ',\r\n                                    minLength : 'Must be greater than 2 charachters.',\r\n                                    maxLength : 'Must be 15 characters or less.',\r\n                                    isNumber : 'Must be a number.'\r\n                                }}\r\n                                />                                                       \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"email\" md={2}>\r\n                                Email\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\" \r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required , isEmail\r\n                                }}\r\n                                />   \r\n                                 <Errors className=\"text-danger\" model=\".email\" show=\"touched\"\r\n                                messages={{\r\n                                    required : 'Required* ',\r\n                                    isEmail : 'Invalid email address'\r\n                                }}\r\n                                />          \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{ size:6 , offset:2}}>\r\n                                <div className=\"form-check\">\r\n                                    <Label check>\r\n                                        <Control.checkbox model=\".agree\" name=\"agree\" className=\"form-check-input\" /> {' '}\r\n                                        <strong>May we contact you?</strong>\r\n                                    </Label>\r\n                                </div>\r\n                            </Col>\r\n                            <Col md={{ size:3 , offset:1}}>\r\n                                <Control.select model=\".contactType\"  name=\"contactType\" className=\"form-control\">\r\n                                    <option>Tel.</option>\r\n                                    <option>Email</option>\r\n                                </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"message\" md={2}>\r\n                                Your Feedback\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea model=\".message\" className=\"form-control\" id=\"message\" name=\"message\" rows=\"12\" />                            \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size:10 , offset:2}}>\r\n                                <Button type=\"submit\" color=\"primary\" >\r\n                                    Send Feedback\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Contact;","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\promotions.js",[],["140","141"],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\comments.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\leaders.js",[],["142","143"],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\AboutComponent.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\dishes.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\leaders.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\comments.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\ActionCreators.js",["144"],"import * as ActionTypes from './ActionTypes';\r\n\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addComment = ( comment ) => ({\r\n    type : ActionTypes.ADD_COMMENT,\r\n    payload : comment\r\n});\r\n\r\nexport const postComment = (dishId , rating , author , comment ) => (dispatch) => {\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n    return fetch(baseUrl + 'comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            'Content-Type' : 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response;\r\n        }else{\r\n            var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    }, error => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error => { console.log('Post comments', error.message)\r\n        alert('Your comment could not be posted\\nError: ' + error.message)});\r\n}\r\n\r\n//------------ Dishes -------------\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes' )\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }else{\r\n                var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (error) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: error \r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n})\r\n\r\n// ---------- Comments ---------\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n    return fetch(baseUrl + 'comments' )\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }else{\r\n                var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n}\r\n\r\nexport const commentsFailed = (error) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: error \r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n})\r\n\r\n//-----------  Promotions -----------\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading(true));\r\n\r\n    return fetch(baseUrl + 'promotions' )\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }else{\r\n                var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(promos => dispatch(addPromos(promos)))\r\n        .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (error) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: error \r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n})\r\n\r\n// ------- Leaders -----------\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    dispatch(leadersLoading(true));\r\n\r\n    return fetch(baseUrl + 'leaders' )\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }else{\r\n                var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(leaders => dispatch(addLeaders(leaders)))\r\n        .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (error) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: error \r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n})\r\n\r\n//----------- Feedback ------------\r\n\r\nexport const postFeedback = (firstname , lastname , telnum , email , agree , contactType , message ) => (dispatch) => {\r\n    const newFeedback = {\r\n        firstname : firstname,\r\n        lastname : lastname,\r\n        telnum : telnum,\r\n        email : email, \r\n        agree : agree,\r\n        contactType : contactType , \r\n        message : message\r\n    }\r\n    newFeedback.date = new Date().toISOString();\r\n    return fetch(baseUrl + 'feedback', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newFeedback),\r\n        headers: {\r\n            'Content-Type' : 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response;\r\n        }else{\r\n            var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    }, error => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => alert(\"Thank you for your feedback!\\n\" + JSON.stringify(response,null,4)))\r\n    .catch(error => { console.log('Post feedback', error.message)\r\n        alert('Your feedback could not be posted\\nError: ' + error.message)});\r\n}\r\n\r\n\r\n","C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\components\\LoadingComponent.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\redux\\forms.js",[],"C:\\Users\\panag\\Desktop\\coursera\\React\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":2,"column":10,"nodeType":"151","messageId":"152","endLine":2,"endColumn":16},{"ruleId":"149","severity":1,"message":"153","line":2,"column":18,"nodeType":"151","messageId":"152","endLine":2,"endColumn":29},{"ruleId":"145","replacedBy":"154"},{"ruleId":"147","replacedBy":"155"},{"ruleId":"149","severity":1,"message":"156","line":4,"column":36,"nodeType":"151","messageId":"152","endLine":4,"endColumn":45},{"ruleId":"149","severity":1,"message":"157","line":4,"column":54,"nodeType":"151","messageId":"152","endLine":4,"endColumn":58},{"ruleId":"149","severity":1,"message":"158","line":4,"column":60,"nodeType":"151","messageId":"152","endLine":4,"endColumn":65},{"ruleId":"149","severity":1,"message":"159","line":12,"column":7,"nodeType":"151","messageId":"152","endLine":12,"endColumn":15},{"ruleId":"149","severity":1,"message":"160","line":15,"column":7,"nodeType":"151","messageId":"152","endLine":15,"endColumn":15},{"ruleId":"161","severity":1,"message":"162","line":62,"column":37,"nodeType":"163","endLine":64,"endColumn":39},{"ruleId":"161","severity":1,"message":"162","line":70,"column":37,"nodeType":"163","endLine":75,"endColumn":39},{"ruleId":"161","severity":1,"message":"164","line":88,"column":37,"nodeType":"163","endLine":90,"endColumn":39},{"ruleId":"165","severity":1,"message":"166","line":40,"column":3,"nodeType":"167","messageId":"168","endLine":51,"endColumn":2},{"ruleId":"149","severity":1,"message":"169","line":2,"column":70,"nodeType":"151","messageId":"152","endLine":2,"endColumn":74},{"ruleId":"149","severity":1,"message":"156","line":2,"column":49,"nodeType":"151","messageId":"152","endLine":2,"endColumn":58},{"ruleId":"149","severity":1,"message":"158","line":2,"column":69,"nodeType":"151","messageId":"152","endLine":2,"endColumn":74},{"ruleId":"149","severity":1,"message":"170","line":2,"column":87,"nodeType":"151","messageId":"152","endLine":2,"endColumn":99},{"ruleId":"149","severity":1,"message":"171","line":4,"column":36,"nodeType":"151","messageId":"152","endLine":4,"endColumn":43},{"ruleId":"172","severity":1,"message":"173","line":60,"column":25,"nodeType":"163","endLine":60,"endColumn":67},{"ruleId":"161","severity":1,"message":"162","line":76,"column":33,"nodeType":"163","endLine":81,"endColumn":35},{"ruleId":"161","severity":1,"message":"162","line":97,"column":33,"nodeType":"163","endLine":101,"endColumn":35},{"ruleId":"161","severity":1,"message":"162","line":116,"column":33,"nodeType":"163","endLine":120,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":136,"column":33,"nodeType":"163","endLine":141,"endColumn":35},{"ruleId":"161","severity":1,"message":"174","line":154,"column":41,"nodeType":"163","endLine":154,"endColumn":118},{"ruleId":"161","severity":1,"message":"175","line":160,"column":33,"nodeType":"163","endLine":160,"endColumn":115},{"ruleId":"161","severity":1,"message":"164","line":171,"column":33,"nodeType":"163","endLine":171,"endColumn":133},{"ruleId":"145","replacedBy":"176"},{"ruleId":"147","replacedBy":"177"},{"ruleId":"145","replacedBy":"178"},{"ruleId":"147","replacedBy":"179"},{"ruleId":"149","severity":1,"message":"180","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":16},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'NavbarBrand' is defined but never used.",["181"],["182"],"'FormGroup' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'required' is assigned a value but never used.","'isNumber' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Fade' is defined but never used.","'FormFeedback' is defined but never used.","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE",["181"],["182"],["181"],["182"],"'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]